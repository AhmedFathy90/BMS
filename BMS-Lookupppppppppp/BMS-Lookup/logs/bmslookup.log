2025-08-12 08:33:48 [BMSLookupHikariPool housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - BMSLookupHikariPool - Thread starvation or clock leap detected (housekeeper delta=8h50m26s600ms335µs400ns).
2025-08-12 08:45:00 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Shutdown initiated...
2025-08-12 08:45:00 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Shutdown completed.
2025-08-12 08:45:28 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-08-12 08:45:28 [main] INFO  com.example.bmslookup.BmsLookupApplication - Starting BmsLookupApplication using Java 1.8.0_202 on AhmedAymanET3 with PID 21464 (C:\Users\eT3-Thinkpad\Documents\BMS-Lookupppppppppp\BMS-Lookup\target\classes started by eT3-Thinkpad in C:\Users\eT3-Thinkpad\Documents\BMS-Lookupppppppppp\BMS-Lookup)
2025-08-12 08:45:28 [main] INFO  com.example.bmslookup.BmsLookupApplication - The following 1 profile is active: "prod"
2025-08-12 08:45:29 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webServiceConfig' of type [com.example.bmslookup.config.WebServiceConfig$$EnhancerBySpringCGLIB$$25653feb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-08-12 08:45:29 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$dba0ed33] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-08-12 08:45:29 [main] INFO  org.springframework.ws.soap.addressing.server.AnnotationActionEndpointMapping - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2025-08-12 08:45:29 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-08-12 08:45:29 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-12 08:45:29 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-08-12 08:45:29 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-08-12 08:45:30 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/bms-lookup] - Initializing Spring embedded WebApplicationContext
2025-08-12 08:45:30 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1666 ms
2025-08-12 08:45:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring DataSource for Teradata
2025-08-12 08:45:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Starting...
2025-08-12 08:45:31 [main] INFO  com.zaxxer.hikari.pool.PoolBase - BMSLookupHikariPool - Driver does not support get/set network timeout for connections. (com.teradata.jdbc.jdk6.JDK6_SQL_Connection.getNetworkTimeout()I)
2025-08-12 08:45:31 [main] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Start completed.
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database connection test succeeded
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database URL: jdbc:teradata://192.168.232.141/DATABASE=GDEV1T_UHI_DATA,CHARSET=UTF8,TMODE=TERA
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database Product: Teradata
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database Version: Teradata Database 20.00.22.31
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - Driver Name: com.teradata.jdbc.TeraDriver
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - Driver Version: 16.20.00.10
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - DataSource configured successfully
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring JdbcTemplate
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - JdbcTemplate configured successfully
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring TransactionManager
2025-08-12 08:45:31 [main] INFO  com.example.bmslookup.config.JdbcConfig - TransactionManager configured successfully
2025-08-12 08:45:31 [main] INFO  org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-08-12 08:45:32 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-08-12 08:45:32 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/bms-lookup'
2025-08-12 08:45:32 [main] INFO  com.example.bmslookup.BmsLookupApplication - Started BmsLookupApplication in 4.107 seconds (JVM running for 4.518)
2025-08-12 08:45:35 [http-nio-8080-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/bms-lookup] - Initializing Spring MessageDispatcherServlet 'messageDispatcherServlet'
2025-08-12 08:45:35 [http-nio-8080-exec-1] INFO  org.springframework.ws.transport.http.MessageDispatcherServlet - Initializing Servlet 'messageDispatcherServlet'
2025-08-12 08:45:35 [http-nio-8080-exec-1] INFO  org.springframework.ws.soap.saaj.SaajSoapMessageFactory - Creating SAAJ 1.3 MessageFactory with SOAP 1.1 Protocol
2025-08-12 08:45:35 [http-nio-8080-exec-1] INFO  org.springframework.ws.transport.http.MessageDispatcherServlet - Completed initialization in 14 ms
2025-08-12 08:45:35 [http-nio-8080-exec-1] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 08:45:35 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:35 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:45:36 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:45:40 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:45:40 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:45:40 [http-nio-8080-exec-1] ERROR com.example.bmslookup.endpoint.UHIEndpoint - Insert error: 
org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]; [Teradata Database] [TeraJDBC 16.20.00.10] [Error 2801] [SQLState 23000] Duplicate unique prime key error in gdev1t_uhi_data.contact.; nested exception is java.sql.SQLException: [Teradata Database] [TeraJDBC 16.20.00.10] [Error 2801] [SQLState 23000] Duplicate unique prime key error in gdev1t_uhi_data.contact.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:962)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1017)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1027)
	at com.example.bmslookup.service.insert_Beneficiary.dynamicInsert(insert_Beneficiary.java:154)
	at com.example.bmslookup.service.insert_Beneficiary.insertIfNotExists(insert_Beneficiary.java:114)
	at com.example.bmslookup.service.insert_Beneficiary.insertBeneficiaryData(insert_Beneficiary.java:94)
	at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:87)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)
	at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)
	at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)
	at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)
	at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)
	at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)
	at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)
	at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLException: [Teradata Database] [TeraJDBC 16.20.00.10] [Error 2801] [SQLState 23000] Duplicate unique prime key error in gdev1t_uhi_data.contact.
	at com.teradata.jdbc.jdbc_4.util.ErrorFactory.makeDatabaseSQLException(ErrorFactory.java:309)
	at com.teradata.jdbc.jdbc_4.statemachine.ReceiveInitSubState.action(ReceiveInitSubState.java:103)
	at com.teradata.jdbc.jdbc_4.statemachine.StatementReceiveState.subStateMachine(StatementReceiveState.java:311)
	at com.teradata.jdbc.jdbc_4.statemachine.StatementReceiveState.action(StatementReceiveState.java:200)
	at com.teradata.jdbc.jdbc_4.statemachine.StatementController.runBody(StatementController.java:137)
	at com.teradata.jdbc.jdbc_4.statemachine.PreparedStatementController.run(PreparedStatementController.java:46)
	at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:389)
	at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:331)
	at com.teradata.jdbc.jdbc_4.TDPreparedStatement.doPrepExecuteUpdate(TDPreparedStatement.java:228)
	at com.teradata.jdbc.jdbc_4.TDPreparedStatement.executeUpdate(TDPreparedStatement.java:2772)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$update$2(JdbcTemplate.java:967)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 61 common frames omitted
2025-08-12 08:51:06 [http-nio-8080-exec-3] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:51:06 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:51:06 [http-nio-8080-exec-3] ERROR com.example.bmslookup.endpoint.UHIEndpoint - Insert error: 
org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]; [Teradata Database] [TeraJDBC 16.20.00.10] [Error 2801] [SQLState 23000] Duplicate unique prime key error in gdev1t_uhi_data.contact.; nested exception is java.sql.SQLException: [Teradata Database] [TeraJDBC 16.20.00.10] [Error 2801] [SQLState 23000] Duplicate unique prime key error in gdev1t_uhi_data.contact.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:962)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1017)
	at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1027)
	at com.example.bmslookup.service.insert_Beneficiary.dynamicInsert(insert_Beneficiary.java:154)
	at com.example.bmslookup.service.insert_Beneficiary.insertIfNotExists(insert_Beneficiary.java:114)
	at com.example.bmslookup.service.insert_Beneficiary.insertBeneficiaryData(insert_Beneficiary.java:94)
	at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:87)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)
	at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)
	at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)
	at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)
	at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)
	at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)
	at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)
	at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLException: [Teradata Database] [TeraJDBC 16.20.00.10] [Error 2801] [SQLState 23000] Duplicate unique prime key error in gdev1t_uhi_data.contact.
	at com.teradata.jdbc.jdbc_4.util.ErrorFactory.makeDatabaseSQLException(ErrorFactory.java:309)
	at com.teradata.jdbc.jdbc_4.statemachine.ReceiveInitSubState.action(ReceiveInitSubState.java:103)
	at com.teradata.jdbc.jdbc_4.statemachine.StatementReceiveState.subStateMachine(StatementReceiveState.java:311)
	at com.teradata.jdbc.jdbc_4.statemachine.StatementReceiveState.action(StatementReceiveState.java:200)
	at com.teradata.jdbc.jdbc_4.statemachine.StatementController.runBody(StatementController.java:137)
	at com.teradata.jdbc.jdbc_4.statemachine.PreparedStatementController.run(PreparedStatementController.java:46)
	at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:389)
	at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:331)
	at com.teradata.jdbc.jdbc_4.TDPreparedStatement.doPrepExecuteUpdate(TDPreparedStatement.java:228)
	at com.teradata.jdbc.jdbc_4.TDPreparedStatement.executeUpdate(TDPreparedStatement.java:2772)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$update$2(JdbcTemplate.java:967)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 61 common frames omitted
2025-08-12 08:55:54 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Shutdown initiated...
2025-08-12 08:55:56 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Shutdown completed.
2025-08-12 08:56:27 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-08-12 08:56:27 [main] INFO  com.example.bmslookup.BmsLookupApplication - Starting BmsLookupApplication using Java 1.8.0_202 on AhmedAymanET3 with PID 28188 (C:\Users\eT3-Thinkpad\Documents\BMS-Lookupppppppppp\BMS-Lookup\target\classes started by eT3-Thinkpad in C:\Users\eT3-Thinkpad\Documents\BMS-Lookupppppppppp\BMS-Lookup)
2025-08-12 08:56:27 [main] INFO  com.example.bmslookup.BmsLookupApplication - The following 1 profile is active: "prod"
2025-08-12 08:56:28 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webServiceConfig' of type [com.example.bmslookup.config.WebServiceConfig$$EnhancerBySpringCGLIB$$fa5ef50a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-08-12 08:56:28 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$b09aa252] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-08-12 08:56:28 [main] INFO  org.springframework.ws.soap.addressing.server.AnnotationActionEndpointMapping - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2025-08-12 08:56:28 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-08-12 08:56:28 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-12 08:56:28 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-08-12 08:56:28 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-08-12 08:56:28 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/bms-lookup] - Initializing Spring embedded WebApplicationContext
2025-08-12 08:56:28 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1756 ms
2025-08-12 08:56:28 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring DataSource for Teradata
2025-08-12 08:56:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Starting...
2025-08-12 08:56:29 [main] INFO  com.zaxxer.hikari.pool.PoolBase - BMSLookupHikariPool - Driver does not support get/set network timeout for connections. (com.teradata.jdbc.jdk6.JDK6_SQL_Connection.getNetworkTimeout()I)
2025-08-12 08:56:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Start completed.
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database connection test succeeded
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database URL: jdbc:teradata://192.168.232.141/DATABASE=GDEV1T_UHI_DATA,CHARSET=UTF8,TMODE=TERA
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database Product: Teradata
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database Version: Teradata Database 20.00.22.31
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Driver Name: com.teradata.jdbc.TeraDriver
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Driver Version: 16.20.00.10
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - DataSource configured successfully
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring JdbcTemplate
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - JdbcTemplate configured successfully
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring TransactionManager
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.config.JdbcConfig - TransactionManager configured successfully
2025-08-12 08:56:30 [main] INFO  org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-08-12 08:56:30 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-08-12 08:56:30 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/bms-lookup'
2025-08-12 08:56:30 [main] INFO  com.example.bmslookup.BmsLookupApplication - Started BmsLookupApplication in 4.245 seconds (JVM running for 4.632)
2025-08-12 08:56:55 [http-nio-8080-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/bms-lookup] - Initializing Spring MessageDispatcherServlet 'messageDispatcherServlet'
2025-08-12 08:56:55 [http-nio-8080-exec-1] INFO  org.springframework.ws.transport.http.MessageDispatcherServlet - Initializing Servlet 'messageDispatcherServlet'
2025-08-12 08:56:55 [http-nio-8080-exec-1] INFO  org.springframework.ws.soap.saaj.SaajSoapMessageFactory - Creating SAAJ 1.3 MessageFactory with SOAP 1.1 Protocol
2025-08-12 08:56:55 [http-nio-8080-exec-1] INFO  org.springframework.ws.transport.http.MessageDispatcherServlet - Completed initialization in 12 ms
2025-08-12 08:56:55 [http-nio-8080-exec-1] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:55 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:56:58 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:57:43 [http-nio-8080-exec-3] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 08:57:43 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:43 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 08:57:43 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:43 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:43 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:43 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:43 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:43 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.employment (id, beneficiaryid, netincome, jobdescription, job, employergovernerate, companysocialinsuranceid) VALUES (?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:57:45 [http-nio-8080-exec-3] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:59:00 [http-nio-8080-exec-5] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:59:48 [http-nio-8080-exec-7] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 08:59:48 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:48 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 08:59:49 [http-nio-8080-exec-7] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 09:01:20 [BMSLookupHikariPool housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - BMSLookupHikariPool - Thread starvation or clock leap detected (housekeeper delta=49s891ms245µs400ns).
2025-08-12 09:18:32 [http-nio-8080-exec-9] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:18:32 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:32 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id=?]
2025-08-12 09:18:32 [http-nio-8080-exec-9] WARN  com.zaxxer.hikari.pool.PoolBase - BMSLookupHikariPool - Failed to validate connection com.teradata.jdbc.jdk6.JDK6_SQL_Connection@6d171ce0 ([Teradata JDBC Driver] [TeraJDBC 16.20.00.10] [Error 804] [SQLState 08S01] Socket communication failure for Packet transmit Tue Aug 12 09:18:32 EET 2025 socket orig=192.168.232.141 local=/192.168.232.1:55428 remote=/192.168.232.141:1025 keepalive=false nodelay=false receive=65536 send=65536 linger=10 traffic=0 concurrent=3 contimeout=10000 conwait=1000 connecttime=7 connecttotaltime=10 connectattempts=1 connectfailures=0 reconnectattempts=0 recoverable=false redrive=false failurecache={} cid=468be356 sess=2687 java.net.SocketException: Connection reset by peer: socket write error   at java.net.SocketOutputStream.socketWrite0(Native Method)   at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)   at java.net.SocketOutputStream.write(SocketOutputStream.java:155)   at com.teradata.jdbc.jdbc_4.io.TDNetworkIOIF.write(TDNetworkIOIF.java:1065)   at com.teradata.jdbc.jdbc_4.io.TDPacketStream.writeStream(TDPacketStream.java:787)   at com.teradata.jdbc.jdbc_4.statemachine.SendState.sendPacket(SendState.java:126)   at com.teradata.jdbc.jdbc_4.statemachine.StatementSendState.action(StatementSendState.java:108)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.runBody(StatementController.java:137)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.run(StatementController.java:128)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:389)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:331)   at com.teradata.jdbc.jdbc_4.TDStatement.doNonPrepExecute(TDStatement.java:294)   at com.teradata.jdbc.jdbc_4.TDStatement.execute(TDStatement.java:1136)   at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:169)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:186)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:162)   at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)   at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)   at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)   at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)   at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:645)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:715)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:746)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:759)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:881)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:903)   at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:99)   at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:62)   at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:498)   at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)   at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)   at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)   at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)   at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)   at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)   at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)   at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)   at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)   at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)   at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)   at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)   at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)   at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)   at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)   at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)   at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)   at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)   at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)   at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)   at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)   at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)   at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)   at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)   at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)   at java.lang.Thread.run(Thread.java:748)  ). Possibly consider using a shorter maxLifetime value.
2025-08-12 09:18:32 [http-nio-8080-exec-9] WARN  com.zaxxer.hikari.pool.PoolBase - BMSLookupHikariPool - Failed to validate connection com.teradata.jdbc.jdk6.JDK6_SQL_Connection@3fd504d7 ([Teradata JDBC Driver] [TeraJDBC 16.20.00.10] [Error 804] [SQLState 08S01] Socket communication failure for Packet transmit Tue Aug 12 09:18:32 EET 2025 socket orig=192.168.232.141 local=/192.168.232.1:55430 remote=/192.168.232.141:1025 keepalive=false nodelay=false receive=65536 send=65536 linger=10 traffic=0 concurrent=3 contimeout=10000 conwait=1000 connecttime=1 connecttotaltime=3 connectattempts=1 connectfailures=0 reconnectattempts=0 recoverable=false redrive=false failurecache={} cid=3bea97f5 sess=2688 java.net.SocketException: Connection reset by peer: socket write error   at java.net.SocketOutputStream.socketWrite0(Native Method)   at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)   at java.net.SocketOutputStream.write(SocketOutputStream.java:155)   at com.teradata.jdbc.jdbc_4.io.TDNetworkIOIF.write(TDNetworkIOIF.java:1065)   at com.teradata.jdbc.jdbc_4.io.TDPacketStream.writeStream(TDPacketStream.java:787)   at com.teradata.jdbc.jdbc_4.statemachine.SendState.sendPacket(SendState.java:126)   at com.teradata.jdbc.jdbc_4.statemachine.StatementSendState.action(StatementSendState.java:108)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.runBody(StatementController.java:137)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.run(StatementController.java:128)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:389)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:331)   at com.teradata.jdbc.jdbc_4.TDStatement.doNonPrepExecute(TDStatement.java:294)   at com.teradata.jdbc.jdbc_4.TDStatement.execute(TDStatement.java:1136)   at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:169)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:186)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:162)   at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)   at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)   at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)   at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)   at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:645)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:715)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:746)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:759)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:881)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:903)   at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:99)   at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:62)   at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:498)   at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)   at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)   at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)   at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)   at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)   at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)   at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)   at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)   at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)   at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)   at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)   at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)   at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)   at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)   at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)   at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)   at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)   at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)   at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)   at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)   at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)   at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)   at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)   at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)   at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)   at java.lang.Thread.run(Thread.java:748)  ). Possibly consider using a shorter maxLifetime value.
2025-08-12 09:18:32 [http-nio-8080-exec-9] WARN  com.zaxxer.hikari.pool.PoolBase - BMSLookupHikariPool - Failed to validate connection com.teradata.jdbc.jdk6.JDK6_SQL_Connection@1a898bdd ([Teradata JDBC Driver] [TeraJDBC 16.20.00.10] [Error 804] [SQLState 08S01] Socket communication failure for Packet transmit Tue Aug 12 09:18:32 EET 2025 socket orig=192.168.232.141 local=/192.168.232.1:55431 remote=/192.168.232.141:1025 keepalive=false nodelay=false receive=65536 send=65536 linger=10 traffic=0 concurrent=3 contimeout=10000 conwait=1000 connecttime=2 connecttotaltime=2 connectattempts=1 connectfailures=0 reconnectattempts=0 recoverable=false redrive=false failurecache={} cid=728d5606 sess=2689 java.net.SocketException: Connection reset by peer: socket write error   at java.net.SocketOutputStream.socketWrite0(Native Method)   at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)   at java.net.SocketOutputStream.write(SocketOutputStream.java:155)   at com.teradata.jdbc.jdbc_4.io.TDNetworkIOIF.write(TDNetworkIOIF.java:1065)   at com.teradata.jdbc.jdbc_4.io.TDPacketStream.writeStream(TDPacketStream.java:787)   at com.teradata.jdbc.jdbc_4.statemachine.SendState.sendPacket(SendState.java:126)   at com.teradata.jdbc.jdbc_4.statemachine.StatementSendState.action(StatementSendState.java:108)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.runBody(StatementController.java:137)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.run(StatementController.java:128)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:389)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:331)   at com.teradata.jdbc.jdbc_4.TDStatement.doNonPrepExecute(TDStatement.java:294)   at com.teradata.jdbc.jdbc_4.TDStatement.execute(TDStatement.java:1136)   at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:169)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:186)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:162)   at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)   at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)   at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)   at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)   at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:645)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:715)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:746)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:759)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:881)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:903)   at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:99)   at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:62)   at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:498)   at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)   at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)   at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)   at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)   at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)   at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)   at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)   at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)   at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)   at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)   at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)   at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)   at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)   at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)   at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)   at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)   at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)   at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)   at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)   at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)   at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)   at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)   at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)   at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)   at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)   at java.lang.Thread.run(Thread.java:748)  ). Possibly consider using a shorter maxLifetime value.
2025-08-12 09:18:32 [http-nio-8080-exec-9] WARN  com.zaxxer.hikari.pool.PoolBase - BMSLookupHikariPool - Failed to validate connection com.teradata.jdbc.jdk6.JDK6_SQL_Connection@13dd7ccc ([Teradata JDBC Driver] [TeraJDBC 16.20.00.10] [Error 804] [SQLState 08S01] Socket communication failure for Packet transmit Tue Aug 12 09:18:32 EET 2025 socket orig=192.168.232.141 local=/192.168.232.1:55433 remote=/192.168.232.141:1025 keepalive=false nodelay=false receive=65536 send=65536 linger=10 traffic=0 concurrent=3 contimeout=10000 conwait=1000 connecttime=1 connecttotaltime=3 connectattempts=1 connectfailures=0 reconnectattempts=0 recoverable=false redrive=false failurecache={} cid=32e4911e sess=2690 java.net.SocketException: Connection reset by peer: socket write error   at java.net.SocketOutputStream.socketWrite0(Native Method)   at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)   at java.net.SocketOutputStream.write(SocketOutputStream.java:155)   at com.teradata.jdbc.jdbc_4.io.TDNetworkIOIF.write(TDNetworkIOIF.java:1065)   at com.teradata.jdbc.jdbc_4.io.TDPacketStream.writeStream(TDPacketStream.java:787)   at com.teradata.jdbc.jdbc_4.statemachine.SendState.sendPacket(SendState.java:126)   at com.teradata.jdbc.jdbc_4.statemachine.StatementSendState.action(StatementSendState.java:108)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.runBody(StatementController.java:137)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.run(StatementController.java:128)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:389)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:331)   at com.teradata.jdbc.jdbc_4.TDStatement.doNonPrepExecute(TDStatement.java:294)   at com.teradata.jdbc.jdbc_4.TDStatement.execute(TDStatement.java:1136)   at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:169)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:186)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:162)   at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)   at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)   at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)   at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)   at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:645)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:715)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:746)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:759)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:881)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:903)   at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:99)   at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:62)   at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:498)   at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)   at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)   at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)   at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)   at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)   at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)   at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)   at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)   at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)   at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)   at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)   at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)   at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)   at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)   at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)   at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)   at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)   at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)   at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)   at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)   at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)   at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)   at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)   at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)   at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)   at java.lang.Thread.run(Thread.java:748)  ). Possibly consider using a shorter maxLifetime value.
2025-08-12 09:18:32 [http-nio-8080-exec-9] WARN  com.zaxxer.hikari.pool.PoolBase - BMSLookupHikariPool - Failed to validate connection com.teradata.jdbc.jdk6.JDK6_SQL_Connection@2ad4ba59 ([Teradata JDBC Driver] [TeraJDBC 16.20.00.10] [Error 804] [SQLState 08S01] Socket communication failure for Packet transmit Tue Aug 12 09:18:32 EET 2025 socket orig=192.168.232.141 local=/192.168.232.1:55436 remote=/192.168.232.141:1025 keepalive=false nodelay=false receive=65536 send=65536 linger=10 traffic=0 concurrent=3 contimeout=10000 conwait=1000 connecttime=11 connecttotaltime=12 connectattempts=1 connectfailures=0 reconnectattempts=0 recoverable=false redrive=false failurecache={} cid=2217d537 sess=2691 java.net.SocketException: Connection reset by peer: socket write error   at java.net.SocketOutputStream.socketWrite0(Native Method)   at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)   at java.net.SocketOutputStream.write(SocketOutputStream.java:155)   at com.teradata.jdbc.jdbc_4.io.TDNetworkIOIF.write(TDNetworkIOIF.java:1065)   at com.teradata.jdbc.jdbc_4.io.TDPacketStream.writeStream(TDPacketStream.java:787)   at com.teradata.jdbc.jdbc_4.statemachine.SendState.sendPacket(SendState.java:126)   at com.teradata.jdbc.jdbc_4.statemachine.StatementSendState.action(StatementSendState.java:108)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.runBody(StatementController.java:137)   at com.teradata.jdbc.jdbc_4.statemachine.StatementController.run(StatementController.java:128)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:389)   at com.teradata.jdbc.jdbc_4.TDStatement.executeStatement(TDStatement.java:331)   at com.teradata.jdbc.jdbc_4.TDStatement.doNonPrepExecute(TDStatement.java:294)   at com.teradata.jdbc.jdbc_4.TDStatement.execute(TDStatement.java:1136)   at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:169)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:186)   at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:162)   at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)   at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)   at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)   at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)   at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:645)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:715)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:746)   at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:759)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:881)   at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:903)   at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:99)   at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:62)   at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:498)   at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)   at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)   at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)   at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)   at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)   at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)   at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)   at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)   at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)   at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)   at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)   at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)   at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)   at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)   at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)   at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)   at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)   at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)   at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)   at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)   at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)   at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)   at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)   at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)   at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)   at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)   at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)   at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)   at java.lang.Thread.run(Thread.java:748)  ). Possibly consider using a shorter maxLifetime value.
2025-08-12 09:18:36 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:36 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.beneficiary SET firstname=?, fullname=?, dob=?, gender=?, mobile=?, nationality=?, relation=?, education=?, workstatus=?, nationalid=?, email=?, passportnumber=?, passportexpirydate=?, familyrelation=?, activationstatus=?, familyid=?, memberid=?, socialstatus=?, notes=?, facilityid=?, militaryservice=?, socialinsurancenumber=?, patientid=?, ishandicap=?, iscancer=?, ischronic=?, isdisable=?, ismaternal=?, createdbyuser=?, iscapablehasnoemployment=?, premium_generated=?, updatedat=?, previousbeneficiaryid=?, deactivationreason=?, medicalconditions=?, activationdate=?, dateofdeath=?, otherinsurancecompany=?, othercompanyinfo=?, requester_id=?, educationqualification=?, husbandnationalid=?, uhiadeathreportingdate=?, birthcertificateid=?, country=?, governorate=?, unit=?, coverage_start=?, coverage_end=?, coverageplan=?, doubleinsurancestatus=?, secondarymobile=?, eligibilitytype=?, mossindicator=?, maincategory=?, subcategory=?, deathstatus=?, pcucode=?, pensiondeliveryamount=?, totalofincomecategory=?, totalsalary=?, numberoffamilymembers=? WHERE id=?]
2025-08-12 09:18:36 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:36 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:38 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:18:40 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:41 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:18:41 [http-nio-8080-exec-9] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:18:41 [http-nio-8080-exec-9] ERROR com.example.bmslookup.endpoint.UHIEndpoint - Update error: 
java.lang.RuntimeException: BENEFICIARY ID NOT FOUND
	at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:101)
	at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:76)
	at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)
	at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)
	at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)
	at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)
	at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)
	at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)
	at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)
	at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2025-08-12 09:21:06 [http-nio-8080-exec-1] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:06 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 09:21:07 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:07 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:07 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:07 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 09:21:07 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:07 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:21:07 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:07 [http-nio-8080-exec-1] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 09:21:12 [http-nio-8080-exec-2] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.beneficiary SET firstname=?, fullname=?, dob=?, gender=?, mobile=?, nationality=?, relation=?, education=?, workstatus=?, nationalid=?, email=?, passportnumber=?, passportexpirydate=?, familyrelation=?, activationstatus=?, familyid=?, memberid=?, socialstatus=?, notes=?, facilityid=?, militaryservice=?, socialinsurancenumber=?, patientid=?, ishandicap=?, iscancer=?, ischronic=?, isdisable=?, ismaternal=?, createdbyuser=?, iscapablehasnoemployment=?, premium_generated=?, updatedat=?, previousbeneficiaryid=?, deactivationreason=?, medicalconditions=?, activationdate=?, dateofdeath=?, otherinsurancecompany=?, othercompanyinfo=?, requester_id=?, educationqualification=?, husbandnationalid=?, uhiadeathreportingdate=?, birthcertificateid=?, country=?, governorate=?, unit=?, coverage_start=?, coverage_end=?, coverageplan=?, doubleinsurancestatus=?, secondarymobile=?, eligibilitytype=?, mossindicator=?, maincategory=?, subcategory=?, deathstatus=?, pcucode=?, pensiondeliveryamount=?, totalofincomecategory=?, totalsalary=?, numberoffamilymembers=? WHERE id=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:12 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:13 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:13 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:13 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:21:13 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:13 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:21:13 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:21:13 [http-nio-8080-exec-2] ERROR com.example.bmslookup.endpoint.UHIEndpoint - Update error: 
java.lang.RuntimeException: BENEFICIARY ID NOT FOUND
	at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:101)
	at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:76)
	at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)
	at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)
	at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)
	at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)
	at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)
	at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)
	at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)
	at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2025-08-12 09:22:10 [http-nio-8080-exec-4] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.beneficiary SET firstname=?, fullname=?, dob=?, gender=?, mobile=?, nationality=?, relation=?, education=?, workstatus=?, nationalid=?, email=?, passportnumber=?, passportexpirydate=?, familyrelation=?, activationstatus=?, familyid=?, memberid=?, socialstatus=?, notes=?, facilityid=?, militaryservice=?, socialinsurancenumber=?, patientid=?, ishandicap=?, iscancer=?, ischronic=?, isdisable=?, ismaternal=?, createdbyuser=?, iscapablehasnoemployment=?, premium_generated=?, updatedat=?, previousbeneficiaryid=?, deactivationreason=?, medicalconditions=?, activationdate=?, dateofdeath=?, otherinsurancecompany=?, othercompanyinfo=?, requester_id=?, educationqualification=?, husbandnationalid=?, uhiadeathreportingdate=?, birthcertificateid=?, country=?, governorate=?, unit=?, coverage_start=?, coverage_end=?, coverageplan=?, doubleinsurancestatus=?, secondarymobile=?, eligibilitytype=?, mossindicator=?, maincategory=?, subcategory=?, deathstatus=?, pcucode=?, pensiondeliveryamount=?, totalofincomecategory=?, totalsalary=?, numberoffamilymembers=? WHERE id=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:22:10 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:22:10 [http-nio-8080-exec-4] ERROR com.example.bmslookup.endpoint.UHIEndpoint - Update error: 
java.lang.RuntimeException: BENEFICIARY ID NOT FOUND
	at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:101)
	at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:76)
	at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)
	at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)
	at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)
	at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)
	at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)
	at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)
	at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)
	at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2025-08-12 09:23:25 [http-nio-8080-exec-6] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.beneficiary SET firstname=?, fullname=?, dob=?, gender=?, mobile=?, nationality=?, relation=?, education=?, workstatus=?, nationalid=?, email=?, passportnumber=?, passportexpirydate=?, familyrelation=?, activationstatus=?, familyid=?, memberid=?, socialstatus=?, notes=?, facilityid=?, militaryservice=?, socialinsurancenumber=?, patientid=?, ishandicap=?, iscancer=?, ischronic=?, isdisable=?, ismaternal=?, createdbyuser=?, iscapablehasnoemployment=?, premium_generated=?, updatedat=?, previousbeneficiaryid=?, deactivationreason=?, medicalconditions=?, activationdate=?, dateofdeath=?, otherinsurancecompany=?, othercompanyinfo=?, requester_id=?, educationqualification=?, husbandnationalid=?, uhiadeathreportingdate=?, birthcertificateid=?, country=?, governorate=?, unit=?, coverage_start=?, coverage_end=?, coverageplan=?, doubleinsurancestatus=?, secondarymobile=?, eligibilitytype=?, mossindicator=?, maincategory=?, subcategory=?, deathstatus=?, pcucode=?, pensiondeliveryamount=?, totalofincomecategory=?, totalsalary=?, numberoffamilymembers=? WHERE id=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:25 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:23:26 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:23:26 [http-nio-8080-exec-6] ERROR com.example.bmslookup.endpoint.UHIEndpoint - Update error: 
java.lang.RuntimeException: BENEFICIARY ID NOT FOUND
	at com.example.bmslookup.service.update_beneficiary.dynamicUpdate(update_beneficiary.java:101)
	at com.example.bmslookup.service.update_beneficiary.updateBeneficiaryData(update_beneficiary.java:76)
	at com.example.bmslookup.endpoint.UHIEndpoint.handleRequest(UHIEndpoint.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133)
	at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285)
	at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54)
	at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230)
	at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174)
	at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88)
	at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60)
	at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:555)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:928)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1794)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2025-08-12 09:25:40 [http-nio-8080-exec-8] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:25:40 [http-nio-8080-exec-8] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:25:40 [http-nio-8080-exec-8] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 09:25:40 [http-nio-8080-exec-8] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:25:40 [http-nio-8080-exec-8] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:25:40 [http-nio-8080-exec-8] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:25:40 [http-nio-8080-exec-8] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:25:40 [http-nio-8080-exec-8] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:25:40 [http-nio-8080-exec-8] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:26:26 [http-nio-8080-exec-10] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id=?]
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.beneficiary SET firstname=?, fullname=?, dob=?, gender=?, mobile=?, nationality=?, relation=?, education=?, workstatus=?, nationalid=?, email=?, passportnumber=?, passportexpirydate=?, familyrelation=?, activationstatus=?, familyid=?, memberid=?, socialstatus=?, notes=?, facilityid=?, militaryservice=?, socialinsurancenumber=?, patientid=?, ishandicap=?, iscancer=?, ischronic=?, isdisable=?, ismaternal=?, createdbyuser=?, iscapablehasnoemployment=?, premium_generated=?, updatedat=?, previousbeneficiaryid=?, deactivationreason=?, medicalconditions=?, activationdate=?, dateofdeath=?, otherinsurancecompany=?, othercompanyinfo=?, requester_id=?, educationqualification=?, husbandnationalid=?, uhiadeathreportingdate=?, birthcertificateid=?, country=?, governorate=?, unit=?, coverage_start=?, coverage_end=?, coverageplan=?, doubleinsurancestatus=?, secondarymobile=?, eligibilitytype=?, mossindicator=?, maincategory=?, subcategory=?, deathstatus=?, pcucode=?, pensiondeliveryamount=?, totalofincomecategory=?, totalsalary=?, numberoffamilymembers=? WHERE id=?]
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id=? AND beneficiaryid=?]
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.employment SET netincome=?, jobdescription=?, job=?, employergovernerate=?, companysocialinsuranceid=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id=? AND beneficiaryid=?]
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:26:26 [http-nio-8080-exec-10] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [UPDATE GDEV1T_UHI_DATA.contact SET mobilenumber=?, telephone=?, housenostreet=?, city=?, district=?, primaryaddress=?, governerate=?, otheraddress=?, mobilecountrycode=?, otherphonenumber=?, landlinecountrycode=?, governeratecode=?, landline=?, "landlinenumber(work)"=? WHERE id=? AND beneficiaryid=?]
2025-08-12 09:26:50 [http-nio-8080-exec-2] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:26:50 [http-nio-8080-exec-2] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, mobilecountrycode, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 09:27:25 [http-nio-8080-exec-4] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:27:25 [http-nio-8080-exec-4] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:28:06 [http-nio-8080-exec-6] INFO  com.example.bmslookup.endpoint.UHIEndpoint - Received new request - CorrelationId: 1
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.beneficiary WHERE id = ?]
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.employment WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL query
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [SELECT COUNT(*) FROM GDEV1T_UHI_DATA.contact WHERE id = ? AND (beneficiaryId = ? OR beneficiaryID = ?)]
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL update
2025-08-12 09:28:06 [http-nio-8080-exec-6] DEBUG org.springframework.jdbc.core.JdbcTemplate - Executing prepared SQL statement [INSERT INTO GDEV1T_UHI_DATA.contact (id, beneficiaryid, mobilenumber, telephone, housenostreet, city, district, primaryaddress, governerate, otheraddress, mobilecountrycode, otherphonenumber, landlinecountrycode, governeratecode, landline, "landlinenumber(work)") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
2025-08-12 09:31:48 [BMSLookupHikariPool housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - BMSLookupHikariPool - Thread starvation or clock leap detected (housekeeper delta=2m57s800ms653µs100ns).
2025-08-12 09:38:10 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Shutdown initiated...
2025-08-12 09:38:10 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Shutdown completed.
2025-08-12 09:38:52 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.5.Final
2025-08-12 09:38:52 [main] INFO  com.example.bmslookup.BmsLookupApplication - Starting BmsLookupApplication using Java 1.8.0_202 on AhmedAymanET3 with PID 22720 (C:\Users\eT3-Thinkpad\Documents\BMS-Lookupppppppppp\BMS-Lookup\target\classes started by eT3-Thinkpad in C:\Users\eT3-Thinkpad\Documents\BMS-Lookupppppppppp\BMS-Lookup)
2025-08-12 09:38:52 [main] INFO  com.example.bmslookup.BmsLookupApplication - The following 1 profile is active: "prod"
2025-08-12 09:38:53 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webServiceConfig' of type [com.example.bmslookup.config.WebServiceConfig$$EnhancerBySpringCGLIB$$3ae803a8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-08-12 09:38:53 [main] INFO  org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.ws.config.annotation.DelegatingWsConfiguration' of type [org.springframework.ws.config.annotation.DelegatingWsConfiguration$$EnhancerBySpringCGLIB$$f123b0f0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2025-08-12 09:38:53 [main] INFO  org.springframework.ws.soap.addressing.server.AnnotationActionEndpointMapping - Supporting [WS-Addressing August 2004, WS-Addressing 1.0]
2025-08-12 09:38:54 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
2025-08-12 09:38:54 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-08-12 09:38:54 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-08-12 09:38:54 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.83]
2025-08-12 09:38:54 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/bms-lookup] - Initializing Spring embedded WebApplicationContext
2025-08-12 09:38:54 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2102 ms
2025-08-12 09:38:54 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring DataSource for Teradata
2025-08-12 09:38:54 [main] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Starting...
2025-08-12 09:38:56 [main] INFO  com.zaxxer.hikari.pool.PoolBase - BMSLookupHikariPool - Driver does not support get/set network timeout for connections. (com.teradata.jdbc.jdk6.JDK6_SQL_Connection.getNetworkTimeout()I)
2025-08-12 09:38:56 [main] INFO  com.zaxxer.hikari.HikariDataSource - BMSLookupHikariPool - Start completed.
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database connection test succeeded
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database URL: jdbc:teradata://192.168.232.141/DATABASE=GDEV1T_UHI_DATA,CHARSET=UTF8,TMODE=TERA
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database Product: Teradata
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - Database Version: Teradata Database 20.00.22.31
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - Driver Name: com.teradata.jdbc.TeraDriver
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - Driver Version: 16.20.00.10
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - DataSource configured successfully
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring JdbcTemplate
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - JdbcTemplate configured successfully
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - Configuring TransactionManager
2025-08-12 09:38:56 [main] INFO  com.example.bmslookup.config.JdbcConfig - TransactionManager configured successfully
2025-08-12 09:38:57 [main] INFO  org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-08-12 09:38:57 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-08-12 09:38:57 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path '/bms-lookup'
2025-08-12 09:38:57 [main] INFO  com.example.bmslookup.BmsLookupApplication - Started BmsLookupApplication in 5.617 seconds (JVM running for 6.075)
